# -*- coding: utf-8 -*-
"""ConectToKaggle.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1gBpt558lWV_nAQr-fyBYCx53QRSv2gvo

Instalar el paquete para la conexion a la API de Kaggle
"""

! pip install -q kaggle

"""Visualizar la lista de paquetes instalados de python"""

!python -mpip list -l

"""Conectar a kaggle, para obtener la base de datos(ver links).
https://www.kaggle.com/general/74235
https://stackoverflow.com/questions/49310470/using-kaggle-datasets-in-google-colab
*   Generar la API key en kaggle.com -> account -> generate Api key
*   Incorporar la API key generado por kaggle en el vps de colab.
*   Crear la carpeta kaggle
*   Copiar el archivo kaggle.json a la carpeta kaggle
*   Otorgar permisos al archivo kaggle.json








"""

from google.colab import files
files.upload()

!mkdir ~/.kaggle
!cp kaggle.json ~/.kaggle
!chmod 600 ~/.kaggle/kaggle.json

"""Mostrar informacion, desde la raiz"""

# Commented out IPython magic to ensure Python compatibility.
# %cd ~/.kaggle
!ls -a

"""Mostrar la lista de base de datos del usuario en kaggle"""

!kaggle datasets list

"""Descargar la base de datos de netflix"""



! kaggle datasets download -d amjaads/netflix-movies

"""Descomprimir el archivo zipeado"""

!mkdir ~/.kaggle/datasets 
!mv ~/.kaggle/netflix-movies.zip ~/.kaggle/datasets 
!unzip ~/.kaggle/datasets/netflix-movies.zip

"""Visualizar contenido de la base de datos"""

# Commented out IPython magic to ensure Python compatibility.
# %cd ~/.kaggle/datasets
!ls -a

"""Mostrar la base de datos con python"""

import pandas as pd
data = pd.read_csv("Netflix_movies.csv")
data.head()

"""Obtener vector caracteristico del datasets(duration,year,rating,genre-bag of words-)"""

import numpy as np
import json
from sklearn.feature_extraction.text import CountVectorizer, TfidfVectorizer


class NumpyEncoder(json.JSONEncoder):
  """ Custom encoder for numpy data types """
  def default(self, obj):
    if isinstance(obj, (np.int_, np.intc, np.intp, np.int8,
                        np.int16, np.int32, np.int64, np.uint8,
                        np.uint16, np.uint32, np.uint64)):

        return int(obj)

    elif isinstance(obj, (np.float_, np.float16, np.float32, np.float64)):
        return float(obj)

    elif isinstance(obj, (np.complex_, np.complex64, np.complex128)):
        return {'real': obj.real, 'imag': obj.imag}

    elif isinstance(obj, (np.ndarray,)):
        return obj.tolist()

    elif isinstance(obj, (np.bool_)):
        return bool(obj)

    elif isinstance(obj, (np.void)): 
        return None

    return json.JSONEncoder.default(self, obj)

# convirtiendo al formato JSON
result = data.to_json(orient="records")
parsed = json.loads(result)
# obteniendo los datos de la columna genre
genre = data["genre"]

CountVec = CountVectorizer()
TfidfVec = TfidfVectorizer()

VectorCaracteristicoCount = CountVec.fit_transform(genre)
VectorCaracteristicoTfidf = TfidfVec.fit_transform(genre)

print(len(data))

print(CountVec.get_feature_names())
print(len(CountVec.get_feature_names()))
print(len(VectorCaracteristicoCount.toarray()))


# tempVect = VectorCaracteristicoTfidf.toarray();

# vector caracteristico de bag of words, en arreglo
tempVect = VectorCaracteristicoCount.toarray()

datajson = {"data":[]}

for x in range(len(data)):
  arr = [data['Duration'][x], data['year'][x],data['rating'][x]]
  movie = [data['Duration'][x], data['year'][x],data['rating'][x],data['movie_name'][x], data['director'][x],data['actors'][x],data['country'][x], data['rating'][x],data['enter_in_netflix'][x],]  
  datajson["data"].append({
    "vector": arr + tempVect[x].tolist(),
    "obj": parsed[x]
  })
  if x == 0 :
    print((np.concatenate((arr, tempVect[x]), axis=None)).tolist())
    print(datajson)  
    print(movie)  
    print('Result ...........')
    print(parsed[x])

print([data['Duration'][0], data['year'][0],data['rating'][0]])


json_data = json.dumps(datajson, cls=NumpyEncoder)

# with open('training.json', 'w') as outfile:
#     json.dump(datajson, outfile)


# Writing to sample.json
with open("training.json", "w") as outfile:
    outfile.write(json_data)

# with open('training.json', 'w', encoding='utf-8') as f:
#     json.dump(json_data, f, ensure_ascii=False, indent=4)

# a_file = open("test.txt", "w")
# for row in result:
#    np.savetxt(a_file, row)   
# a_file.close()
# a_file = open("training.txt", "w")
# np.savetxt(a_file, result, fmt="%s") 
# a_file.close()
#

!rm -f ~/.kaggle/datasets/training.json

# Commented out IPython magic to ensure Python compatibility.

# %cd/
!ls
# %cd var
!ls
# %cd ~/.kaggle/datasets
!ls -a

"""Descargar archivos 

"""

from google.colab import files
files.download("training.json");